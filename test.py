# -*- coding: utf-8 -*-
"""Data-Driven Interaction - Testes estatísticos.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/github/mflash/datadriveninteraction/blob/main/DDI_Testes_Estatisticos.ipynb

# Data-Driven Interaction
## Testes estatísticos
"""

#!pip install ipyfilechooser --quiet
import pandas as pd
import numpy as np
import statsmodels.api as sm
import seaborn as sns

from matplotlib import pyplot as plt
from scipy import stats
from scipy.stats import levene, ranksums
from ipyfilechooser import FileChooser
from IPython.display import HTML, display, Image

plt.style.use('fivethirtyeight')

# Resultados de um teste
resultados = { 
    'Participante': [
        1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20,
        21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38,
        39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56,
        57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70       
    ],
    'Tempo':[
        200, 322, 255, 283, 180, 229, 325, 306, 160, 335, 69, 170, 243, 348,
        191, 90, 187, 185, 123, 347, 213, 242, 327, 338, 319, 197, 240, 325,
        340, 213, 251, 153, 310, 212, 292, 358, 337, 183, 231, 300, 230, 403,
        167, 181, 289, 364, 411, 175, 331, 365, 385, 289, 214, 418, 317, 297,
        418, 132, 332, 328, 302, 165, 235, 225, 286, 179, 321, 404, 314, 413
    ],
    'Versão':[
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2
    ]
}

# Criando o data frame
df = pd.DataFrame( data = resultados )

# Para adicionar a leitura a partir de um CSV, comente a linha anterior
# e descomente as linhas abaixo:
#fc = FileChooser('/content');
#display(fc)
#df = pd.read_csv( fc.selected )

# Verificando se está tudo OK
#df

# Visão geral dos dados da versão 1
v1 = df[ df['Versão'] == 1 ]
print(v1.Tempo.describe())

# Visão geral dos dados da versão 2
v2 = df[ df['Versão'] == 2 ]
print(v2.Tempo.describe())

# Visualizando o histograma de tempo da versão 1
plt.hist( v1.Tempo)
plt.xlabel('Tempo')
plt.ylabel('Frequência')
plt.show()

v1.Tempo.plot(kind='density')
plt.show()

sm.qqplot(df['Tempo'], line='s')
plt.show()

# Visualizando o histograma de tempo da versão 2
plt.hist( v2.Tempo )
plt.xlabel('Tempo')
plt.ylabel('Frequência')
plt.show()

plt.boxplot( [v1.Tempo, v2.Tempo], labels=['Tempo de tarefa (v1)', 'Tempo de tarefa (v2)'] )
plt.show()
#v2.Tempo.plot(kind='box')

"""## Teste de normalidade

Na biblioteca SciPy, você pode interpretar o p-value da seguinte forma.
   
* p <= alpha: os dados não seguem uma distribuição normal (rejeita H0).
* p > alpha: os dados seguem uma distribuição normal (falha ao rejeitar H0).

Neste exemplo, vamos usar alpha = 0.05
"""

# Teste de normalidade
w, pvalue = stats.shapiro( df.Tempo )

alpha = 0.05
if pvalue <= alpha:
    print( f'Os dados não seguem uma distribuição normal (p-value={pvalue:.3f})' )
else:
    print( f'Os dados seguem uma distribuição normal (p-value={pvalue:.3f})' )

# Teste de variância
levene_test = levene( v1.Tempo, v2.Tempo )

if levene_test.pvalue <= alpha:
    print( f'Pequeno p-value sugere que as populações NÃO têm a mesma variância (p-value={levene_test.pvalue:.3f})' )
else:
    print( f'Grande p-value sugere que as populações têm a mesma variância (p-value={levene_test.pvalue:.3f})' )

mean = np.mean(v1.Tempo)
std = np.std(v1.Tempo)
no = len(df)
normal_tempo = np.random.normal(mean,std,no)
df['normal_tempo'] = normal_tempo
fig, ax = plt.subplots(figsize=(15,4))
sns.distplot(df['Tempo'],kde=False, hist_kws={'edgecolor':'black'})
sns.distplot(df['normal_tempo'], kde=False, hist_kws={'edgecolor':'black'})
plt.legend(['Real','Normal'])
plt.show()

"""## Escolhendo os testes estatísticos

* **Se os dados seguem uma distribuição normal: testes paramétricos**
    * Se precisar comparar condições entre 2 grupos: **Teste-T**
        * **Exemplo:** para comparar tempos de tarefa entre dois grupos.
    * Se precisar comparar 2 observações para cada participante: **Teste-T pareado**
        * **Exemplo:** para comparar se participantes reduziram o tempo de tarefa (curva de aprendizado).
    * Se precisar comparar 2+ condições para 2+ grupos: **ANOVA**
        * **Exemplo:** para comparar tempos de tarefa considerando tempo de experiência e dispositivos utilizados.
    * Se precisar comparar proporções de preferência: **Chi-quadrado**
        * **Exemplo:** para comparar preferências de usuários para uma determinada IU.
        
* **Se os dados NÃO seguem uma distribuição normal: testes não paramétricos**
  
    * Se precisar comparar condições entre 2 grupos: **Teste Wilcoxon rank-sum**
        * **Exemplo:** para comparar tempos de tarefa entre dois grupos.
    * Se precisar comparar 2 observações para cada participante: **Teste Wilcoxon signed-rank**
      * **Exemplo:** para comparar se participantes reduziram o tempo de tarefa (curva de aprendizado).
    * Se precisar comparar 2+ observações para cada participante: **Teste Friedman**
        * **Exemplo:** para comparar quando participantes experimentam 2+ opções de interface.
    * Se precisar comparar proporções de preferência: **Ordinal Logistic Regression**
        * **Exemplo:** para comparar preferências de usuários para uma determinada IU.
        
"""

# Verificando se a diferença entre as médias é estatisticamente significativa (PARAMÉTRICO)
t_test = stats.ttest_ind( v1, v2, equal_var = True ) # Note que o equal_var=True com base no teste de Levene.
print( t_test )

# nível de significância
if( t_test.pvalue[0] <= alpha ):
  print( 'Diferença entre médias de tempo das versões 1 e 2 é estatisticamente significativa (p-value={:.3f})'.format(t_test.pvalue[0]) )
else:
  print( 'Diferença entre médias de tempo das versões 1 e 2 NÃO é estatisticamente significativa (p-value={:.3f})'.format(t_test.pvalue[0]) )

# Verificando se a diferença entre as médias é estatisticamente significativa (NÃO PARAMÉTRICO)
ranksum_result = ranksums( v1.Tempo, v2.Tempo )
print( ranksum_result )

if( ranksum_result.pvalue <= alpha ):
  print( 'Diferença entre médias de tempo das versões 1 e 2 é estatisticamente significativa (p-value={:.3f})'.format(t_test.pvalue[0]) )
else:
  print( 'Diferença entre médias de tempo das versões 1 e 2 NÃO é estatisticamente significativa (p-value={:.3f})'.format(t_test.pvalue[0]) )
 
